import json
import getpass  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
from telethon import TelegramClient, sync, events
from telethon.errors.rpcerrorlist import SessionPasswordNeededError
from telethon.tl.types import User, Chat
import os
import asyncio
# from config import Config
import config

# client = TelegramClient(
#     'automat_session', self.api_id, self.api_hash,)
# @client.on(events.NewMessage)
# async def my_event_handler(event):
#     if 'hello' in event.raw_text:
#         await event.reply('hi!')


   

# async def code_callback():
#     return await get_input("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏:")


# async def password_callback():
#     return await get_input("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    
    
class SettingsTelegram:
    client = None
    def __init__(self):
        # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config_telegram.json
      

            self.api_id = ''
            self.api_hash = ''
            self.phone_number = ''
            self.pwd = ''
            self.__fill_in_the_class()

            client = TelegramClient(
                'automat_session', self.api_id, self.api_hash,)
            self.client = client

            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.client.on(events.NewMessage)(self.handle_new_message)
           
            self.message_callback = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–±—ç–∫

    

    def set_message_callback(self, callback):
        self.message_callback = callback

    async def handle_new_message(self, event):
        
        message_text = event.message.message
        sender_id = event.sender_id
        print(f"–¢–ï–°–¢ –ú–û–î–£–õ–¨ –¢–ï–õ–ï–ì–†–ê–ú  handle_new_message {
              sender_id}: {message_text}")
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if self.message_callback:
            await self.message_callback(sender_id, message_text)


    async def send_file(self, chat_id, file_path):
        async with self.client:
            await self.client.send_file(chat_id, file_path)
    
    def __fill_in_the_class(self):

        conf = config.get_config()
        for attr_name, attr_value in conf.__dict__.items():
            attr = getattr(self, attr_name, None)

            if hasattr(self, attr_name):
                setattr(self, attr_name, attr_value)

    async def connect(self, callback_tg_phone, callback_tg_code, callback_tg_pass):
        settings = config.get_config()
        if not settings.api_id:
            return

        try:
            await self.client.start(
                phone= callback_tg_phone,  # –ö–æ–ª–±–µ–∫ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                code_callback=callback_tg_code,          # –ö–æ–ª–±–µ–∫ –¥–ª—è –∫–æ–¥–∞
                password=callback_tg_pass)
            
        except SessionPasswordNeededError:
                print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
        
        
        # if settings.checkBox2FA:
        #     try:
        #         await self.client.start(password=self.pwd)
        #     except SessionPasswordNeededError:
        #         print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        #         return
        # else:
        #     try:
        #        await self.client.start(phone=settings.phone_number,code_callback= code_callback)
        #     except SessionPasswordNeededError:
        #         print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        #         return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞

        #     # –ï—Å–ª–∏ –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–æ –æ—à–∏–±–∫–∏, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        #     try:
        #         await self.client.start(phone=settings.phone_number)
        #     except SessionPasswordNeededError:
        #         print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        #         return
        
        
        
        
        
        
        
        # –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ —Ç—É—Ç
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ:
        # me = await self.client.get_me()
        # print(f'–ü—Ä–∏–≤–µ—Ç, {me.first_name}!')

        # # # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        # async for dialog in self.client.iter_dialogs():
        #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        #     name = dialog.name
        #     id = dialog.id
        #     username = getattr(dialog, 'username', '–ù–µ—Ç username')
        #     print(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name}, ID: {id}, Username: {username}')

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        # chat_id = 1353211874
        # messages = await self.client.get_messages(chat_id, limit=15)

        # # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
        # for message in messages:
        #     print(f'ID: {message.id}, –î–∞—Ç–∞: {message.date}, –¢–µ–∫—Å—Ç: {message.text}')

        # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        # chat_id = -1001260324106  # –•—Ä–∞–Ω–∏—Ç–µ–ª—ñ –∑—Ä–∞–¥–∏üá∫üá¶
        # await self.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ python –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ç–µ–ª–µ–≥—Ä–∞–º –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏. –í–æ–∑–º–æ–∂–Ω–æ –¥–∞–∂–µ –±–æ—Ç–æ–º")

        # await self.client.disconnect()





    async def get_messages(self, dialog_id, limit=20):

        messages = await self.client.get_messages(dialog_id, limit)
        return messages
       
    async def get_dialogs_with_pictures(self):

        dialogs_with_pictures = []
        config_unit = config.get_config()
        directory_path_staff = config_unit.directory_path_staff

        async for dialog in self.client.iter_dialogs():

            id = dialog.id
            username = getattr(dialog.entity, 'username', None)
            dialogname = dialog.name

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º dialogname
            # –ï—Å–ª–∏ –æ–±–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ù–µ—Ç username"
            display_name = username if username else (
                dialogname if dialogname else '–ù–µ—Ç username')

            photo_file_name = f"photo_{dialog.id}.jpg"
            photo_file_path = os.path.join(
                directory_path_staff, photo_file_name)

            if os.path.exists(photo_file_path):
                # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                photo_url = photo_file_path
            else:
                photo_url = photo_file_path  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                await self.client.download_profile_photo(dialog.id, file=photo_file_path, download_big=False)

            dialogs_with_pictures.append((id, display_name, photo_url))

        return dialogs_with_pictures


    async def disconnect(self):
        try:
            await self.client.disconnect()
        except SessionPasswordNeededError:
            print("disconnect –Ω–µ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            return

        print("disconnect  —É—Å–ø–µ—à–Ω–æ")

    async def send_message(self, chat_id, message):
        try:
            await self.client.send_message(chat_id, message)

        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

    def run(self):
        import asyncio
        asyncio.run(self.connect())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
